#!/bin/bash

# Script Configuration
__version__="1.5"
HOST='127.0.0.1'
PORT='8090'
SERVER_DIR=".server"
LOG_FILE="$SERVER_DIR/cloudflared.log"
CONFIG_FILE="$SERVER_DIR/bin/config.json"

# Function to display a simple banner
banner() {
    echo "PROJECT-SARAH"
}

# Check if a package is installed
check_package() {
    local pkg="$1"
    if pkg list-installed | grep -q $pkg; then
        return 0  # Package is installed
    else
        return 1  # Package is not installed
    fi
}

# Install PHP and Apache2 if not already installed
install_php_apache() {
    if ! check_package "php"; then
        pkg update && pkg upgrade
        pkg install php
    fi

    if ! check_package "apache2"; then
        pkg update && pkg upgrade
        pkg install apache2
    fi
}

# Create necessary directories and handle files
prepare_directories() {
    mkdir -p "$SERVER_DIR/www"
    : > "$LOG_FILE"  # Truncate log file
}

# Install Cloudflared if not already installed
install_cloudflared() {
    local arch=$(uname -m)
    local file="cloudflared-linux-"
    case "$arch" in
        aarch64) file+="arm64" ;;
        x86_64) file+="amd64" ;;
        *) file+="arm" ;;  # Assuming arm for other architectures
    esac
    local url="https://github.com/cloudflare/cloudflared/releases/latest/download/$file"

    if [[ ! -f "$SERVER_DIR/cloudflared" ]]; then
        curl -sL "$url" -o "$SERVER_DIR/cloudflared" && chmod +x "$SERVER_DIR/cloudflared"
    fi
}

# Start the Cloudflared tunnel
start_cloudflared() {
    "$SERVER_DIR/cloudflared" tunnel --url http://$HOST:$PORT --logfile "$LOG_FILE" > /dev/null 2>&1 &
    sleep 5  # Wait for the tunnel to initialize
}

# Extract Cloudflared URL from log
extract_cloudflared_url() {
    local url=$(grep -o 'https://[-0-9a-z]*\.trycloudflare.com' "$LOG_FILE" | head -1)
    if [[ -n "$url" ]]; then
        echo "$url"
    else
        return 1
    fi
}

# Function to send message to Telegram using Telegram Bot API
send_telegram_message() {
    local token
    local chat_id
    if [[ -f "$CONFIG_FILE" ]]; then
        token=$(jq -r '.telegram_bot_token' "$CONFIG_FILE")
        chat_id=$(jq -r '.telegram_chat_id' "$CONFIG_FILE")
        local message="$1"
        curl -s -X POST "https://api.telegram.org/bot$token/sendMessage" -d "chat_id=$chat_id" -d "text=$message" > /dev/null
    fi
}

# Prompt the user to insert Telegram bot token and chat ID
prompt_telegram_credentials() {
    echo "Please insert your Telegram bot token and chat ID:"
    read -p "Telegram Bot Token: " bot_token
    read -p "Telegram Chat ID: " chat_id
    # Create the config.json file
    cat << EOF > "$CONFIG_FILE"
{
    "telegram_bot_token": "$bot_token",
    "telegram_chat_id": "$chat_id"
}
EOF
    echo "Configuration saved to $CONFIG_FILE"
}

# Main function to control script flow
main() {
    clear
    banner
    prepare_directories
    install_php_apache
    install_cloudflared
    start_cloudflared
    
    if ! [[ -f "$CONFIG_FILE" ]]; then
        prompt_telegram_credentials
        exec "$0" "$@"
    fi
    
    local url=$(extract_cloudflared_url)
    if [[ -n "$url" ]]; then
        send_telegram_message "The Project has Been deployed Successfully. URL: $url"
        echo "The Project has Been deployed Successfully"
    else
        send_telegram_message "The Project has Failed"
        echo "The Project has Failed" >&2
    fi
}

# Run the main function
main
